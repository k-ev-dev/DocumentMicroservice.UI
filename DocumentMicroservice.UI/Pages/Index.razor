@inject HttpClient Http
@inject DocumentMicroservice.UI.Service.IDocumentService DocumentService
@using System.Net.Http
@using System.Threading.Tasks
@using System.IO;
@using System.Text.Json;
@using DocumentMicroservice.UI.Model;
@page "/"

<PageTitle>Document Microservice</PageTitle>

    <EditForm Model="@document" OnValidSubmit="DocPostRequest">
        <!--<DataAnnotationsValidator />
        <Microsoft.AspNetCore.Components.Forms.ValidationSummary />-->
        <div class="col-10 Foorm">
            <div>
                <label for="DocumentId" class="form-label">Document Id</label>
                <input @bind-value="document.Id" type="text" class="form-control" id="DocumentId" placeholder="Идентификатор документа"/>
            </div>

            <div class="btn-group" role="group" aria-label="Basic outlined example" style="margin-top: 8px">
                <button type="button" class="btn btn-outline-primary" @onclick="SetNewGuid">Новый id</button>
                <button type="button" class="btn btn-outline-primary" @onclick="GetDocument">Найти по id</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteDoc">Удалить по id</button>
            </div>

        </div>

        <div class="col-10 Foorm">
            <label for="inputAddress" class="form-label">Title</label>
            <input @bind-value="document.Title" type="text" class="form-control" id="inputAddress" placeholder="Название Документа" />
        </div>

        <div class="col-10 py-2 Foorm">
            <label for="inputAddress2" class="form-label">Content</label>
            <input @bind-value="document.Content" type="text" class="form-control" id="inputAddress2" placeholder="Краткое описание" />
        </div>

        <div class="btn-group" role="group" aria-label="Basic mixed styles example" style="margin-top: 8px">
            <button type="submit" class="btn btn-success">Добавить</button>
            <button type="button" class="btn btn-warning" @onclick="EditDoc">Изменить</button>
        </div>
    </EditForm>

    <div style="margin-top: 20px">
        @if (!allDocuments.Any())
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <dl>
                @foreach (var doc in allDocuments) {
                    <dt>@doc.Title - @doc.Id</dt>
                        <dd>@doc.Content</dd>
                }
            </dl>
        }
    </div>

@code {

    private Document document = new();
    private IReadOnlyList<Document> allDocuments = new List<Document>();

    public string BaseUri { get; set; } = "https://localhost:44386/api/Documents/";

    private void SetNewGuid() {
        document.Id = Guid.NewGuid();
    }

    // TODO: добавить обновление после post-запроса
    protected override async Task OnInitializedAsync() {
        allDocuments = await DocumentService.GetAllDocs(BaseUri);
    }

    async Task DocPostRequest() {
        var result = await DocumentService.CreateNewDocument(document, BaseUri);
        allDocuments = await DocumentService.GetAllDocs(BaseUri);
    }

    // TODO: Guid.TryParse может быть...
    async Task GetDocument() { 
        var docUri = String.Concat(BaseUri, document.Id.ToString());
        document = await DocumentService.GetDocById(docUri);
    }

    async Task EditDoc() {
        var result = await DocumentService.PutDocument(document, BaseUri);
        allDocuments = await DocumentService.GetAllDocs(BaseUri);
    }

    async Task DeleteDoc() {
        var docUri = String.Concat(BaseUri, document.Id.ToString());
        var resultStr = await DocumentService.DeleteDocument(docUri);
        allDocuments = await DocumentService.GetAllDocs(BaseUri);
    }
}

